(/ 3 /2)
(/ 3 2)
(/ 3 /2)
quo
(quot 3 2)
exit
-1+ 3)
(dec 5)
(inc 5)
exit
(
xit
exit
qut
q
quit
)
de
(defn +
[a b]
(if (= 0 a)
b
(+ (dec a) (inc b))))
(
exit
)
exit
(add 4 6)
exit
(id
)
(identity 4)
(identity)
(identity 'df')
(identity "dsfa")
(identity (+ 34 535))
(identity '(+f g32423 greg))
(iden
)
exit
(* 604.45.)
()
(def x 604.4542)
(* x x
)
(* x x)
exit
(cons 4 5)
(cons "f" "df")
(cons '5 '8)
(cons "f" "df")
(def t (cons "f" "df"))
(car t)
(cdr t)
(class 1)
(class '(3 4 5))
(class (3 4 5))
(class (cons 4 5))
(class cons)
(class conj)
exit
(gcd 9 6)
(math/gcd 9 6)
(require math)
(:require [clojure.math.numeric-tower :as math])
(require clojure.math.numeric-tower :as math)
(require clojure.math.numeric-tower)
(require '[clojure.math.numeric-tower :as math])
(math/gcd 9 6)
(math/gcd 9 10)
(math/gcd 9 12)
(math/gcd 9 14)
(math/gcd 9 15)
(math/gcd 9 18)
(math/gcd 10 18)
(math/gcd 18 9)
exit
(+ 56 6758 67 2543)
(- 676 78_
)
(- 676 78)
(- 676 756548)
exit
(require '[clojure.math.numeric-tower :as math])
(math/gcd 10 18)
(math/gcd 10 90)
(math/gcd 10 93)
(math/gcd 10 95)
(dec 1)
(rest "sdfds")
(dec 1)
(str (rest "dfsdfgh"))
(str (
exit
)
exit
(cons 3 4)
(cons 3)
(cons 3 '(3 4 5))
(pai 4 5)
(pair 4 5)
ls
exit
"dsfsd"
'('d' 'f' 't' 'u' 'i')
(first '('d' 'f' 't' 'u' 'i'))
(rest '('d' 'f' 't' 'u' 'i'))
(first '('d' 'f' 't' 'u' 'i'))
'fdfds' + (first '('d' 'f' 't' 'u' 'i'))
(str 'fdfds' + (first '('d' 'f' 't' 'u' 'i')))
(println (str 'fdfds' + (first '('d' 'f' 't' 'u' 'i'))))
(print (str 'fdfds' + (first '('d' 'f' 't' 'u' 'i'))))
(str 'fdfds' + (first '('d' 'f' 't' 'u' 'i')))
(str "fdfds" + (first '('d' 'f' 't' 'u' 'i')))
(str "fdfds"  (first '('d' 'f' 't' 'u' 'i')))
(str "fdfds"  (first '(\d \f \t \u \i)))
(first "fsdfsdagfge")
(str "fdfds"  (first '(\d \f \t \u \i)))
(str "fdfds"  (first '(\f \t \u \i)))
(def prefix "abc")
prefix
(def characters "def")
(apply str prefix characters)
(partial (fn [prefix character] (str prefix character)) prefix)
((partial (fn [prefix character] (str prefix character)) prefix) "g")
(map (partial (fn [prefix character] (str prefix character)) prefix) characters))
(map (partial (fn [prefix character] (str prefix character)) prefix) characters)
(map (partial (fn [prefix character] (list (str prefix character) 'hello')) prefix) characters)
(map (partial (fn [prefix characters character] (list (str prefix character) (replace characters character ""))) prefix characters) characters)
(map (partial (fn [prefix characters character] (list (str prefix character) (replace characters #character ""))) prefix characters) characters)
(replace characters "a" "")
(replace characters "a" )
(replace characters "a" \g)
(replace "The color is red" #"red" "blue")
(clojure.string/replace "The color is red" #"red" "blue")
(map (partial (fn [prefix characters character] (list (str prefix character) (clojure.string/replace characters character ""))) prefix characters) characters)
(map (partial (fn [prefix characters character] (list (str prefix character) (clojure.string/replace characters #character ""))) prefix characters) characters)
(map (partial (fn [prefix characters character] (list (str prefix character) (clojure.string/replace characters \character ""))) prefix characters) characters)
(remove characters (= "a"))
(remove (= "a") characters) 
(remove "a" characters) 
(remove (fn [x] (= x "a")) characters) 
characters
(str (remove (fn [x] (= x "a")) characters) )
(remove (fn [x] (= x "f")) characters)
(remove (fn [x] (= x \f)) characters)
characters
(map (partial (fn [prefix characters character] (list (str prefix character) (remove (fn [x] (= x character)) characters character))) prefix characters) characters)
(map (partial (fn [prefix characters character] (list (str prefix character) (remove (fn [x] (= x character)) characters))) prefix characters) characters)
(map (partial (fn [prefix characters character] (list (str prefix character) (apply str (remove (fn [x] (= x character))) characters))) prefix characters) characters)
(map (partial (fn [prefix characters character] (list (str prefix character) (remove (fn [x] (= x character)) characters))) prefix characters) characters)
(apply str (\e \f))
(apply str '(\e \f))
(map (partial (fn [prefix characters character] (list (str prefix character) (apply str (remove (fn [x] (= x character)) characters)) )) prefix characters) characters)
(cartesian-product "sdfs")
exit
(str/replace-first "abaa" "a" "")
(replace-first "abaa" "a" "")
 (use '[clojure.string :only (replace-first)])
(replace-first "abaa" "a" "")
